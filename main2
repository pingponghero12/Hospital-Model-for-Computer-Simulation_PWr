import random


# Zmienne globalne
patient_prob = 0.75
red_beds = 10
orange_beds = 10
yellow_beds = 10
green_beds = 10
endtime = 250
random.seed(43)

# Liczniki globalne
occupied_red_beds = []
occupied_orange_beds = []
occupied_yellow_beds = []
occupied_green_beds = []
hospitalized = [occupied_red_beds, occupied_orange_beds, occupied_yellow_beds, occupied_green_beds]
waiting = []
deaths = 0
recoveries = 0


def ambulanse(patient_prob):
    new_patients = 0
    while True:
        if random.random() < patient_prob:
            new_patients += 1
        else:
            break
    return patient_generation(new_patients)


def patient_generation(new_patients):
    patients = []
    for _ in range(new_patients):
        patient_type = random.choices(
            ['green', 'yellow', 'orange', 'red'],
            weights=[0.25, 0.50, 0.20, 0.05],
            k=1
        )[0]
        patients.append([patient_type, 0, 0])
    return patients


def state_change():
    global recoveries, deaths
    worsened = 0
    bettered = 0
    unchanged = 0
    for beds in hospitalized:
            for patient in beds:
                patient[1]+=1
                if patient[0] == 'green':
                    if random.random() < 0.1:
                        patient[0] = 'yellow'  # getting worse
                        worsened += 1
                    elif random.random() < 0.7:  # patient with green label is more likely to get from the hospital much quicker
                        recoveries += 1  # recovering
                        bettered += 1
                        beds.remove(patient)
                    else:
                        unchanged += 1
                elif patient[0] == 'yellow':
                    if random.random() < 0.3:
                        patient[0] = 'orange'  # getting worse
                        worsened += 1
                    elif random.random() < 0.6:
                        patient[0] = 'green'  # getting better
                        bettered += 1
                    else:
                        unchanged += 1
                elif patient[0] == 'orange':
                    if random.random() < 0.4:
                        patient[0] = 'red'  # getting worse
                        worsened += 1
                    elif random.random() < 0.7:
                        patient[0] = 'yellow'  # getting better
                        bettered += 1
                    else:
                        unchanged += 1
                elif patient[0] == 'red':
                    if random.random() < 0.5:
                        deaths += 1  # dying
                        worsened += 1
                        beds.remove(patient)
                    elif random.random() < 0.8:
                        patient[0] = 'orange'  # getting better
                        bettered += 1
                    else:
                        unchanged += 1

            for patient in waiting:
                patient[2]=patient[2]+1
                if patient[0] == 'green':
                    if random.random() < 0.1:
                        patient[0] = 'yellow'  # getting worse
                        worsened += 1
                    elif random.random() < 0.3:
                        recoveries += 1  # recovering
                        bettered += 1
                        waiting.remove(patient)
                    else:
                        unchanged += 1
                elif patient[0] == 'yellow':
                    if random.random() < 0.3:
                        patient[0] = 'orange'  # getting worse
                        worsened += 1
                    elif random.random() < 0.6:
                        patient[0] = 'green'  # getting better
                        bettered += 1
                    else:
                        unchanged += 1
                elif patient[0] == 'orange':
                    if random.random() < 0.4:
                        patient[0] = 'red'  # getting worse
                        worsened += 1
                    elif random.random() < 0.7:
                        patient[0] = 'yellow'  # getting better
                        bettered += 1
                    else:
                        unchanged += 1
                elif patient[0] == 'red':
                    if random.random() < 0.5:
                        deaths += 1  # dying
                        worsened += 1
                        waiting.remove(patient)
                    else:
                        unchanged += 1

    print(f"Bettered: {bettered}, Worsened: {worsened}, Unchanged: {unchanged}")


def queue_ordering():
    global  waiting
    priority_order = {'red': 0, 'orange': 1, 'yellow': 2, 'green': 3}
    waiting.sort(key=lambda patient: priority_order[patient[0]])



def simulation(endtime, red_beds, orange_beds, yellow_beds, green_beds, patient_prob):
    global recoveries, deaths

    for time in range(endtime):  # Main loop
        print(f"\nTime step {time + 1}:")
        state_change()  # State change for all patients
        new_patients = ambulanse(patient_prob)  # New patients
        waiting.extend(new_patients) # Add new patients to waiting list
        queue_ordering() # Order the waiting list with priority

        for patient in waiting: # Hospitalize patients
            if patient[0] == 'red':
                if len(occupied_red_beds) < red_beds:
                    occupied_red_beds.append(patient)
                    waiting.remove(patient)
                    continue
                elif len(occupied_orange_beds) < orange_beds:
                        occupied_orange_beds.append(patient)
                        waiting.remove(patient)
                        continue
                elif len(occupied_yellow_beds) < yellow_beds:
                            occupied_yellow_beds.append(patient)
                            waiting.remove(patient)
                            continue
                elif len(occupied_green_beds) < green_beds:
                                occupied_green_beds.append(patient)
                                waiting.remove(patient)
                                continue
                else:
                        continue

            elif patient[0] == 'orange':
                if len(occupied_orange_beds) < orange_beds:
                        occupied_orange_beds.append(patient)
                        waiting.remove(patient)
                        continue
                elif len(occupied_yellow_beds) < yellow_beds:
                            occupied_yellow_beds.append(patient)
                            waiting.remove(patient)
                            continue
                elif len(occupied_green_beds) < green_beds:
                                occupied_green_beds.append(patient)
                                waiting.remove(patient)
                                continue
                else:
                        continue

            elif patient[0] == 'yellow':
                if len(occupied_yellow_beds) < yellow_beds:
                            occupied_yellow_beds.append(patient)
                            waiting.remove(patient)
                            continue
                elif len(occupied_green_beds) < green_beds:
                                occupied_green_beds.append(patient)
                                waiting.remove(patient)
                                continue
                else:
                        continue
            elif patient[0] == 'green':
                if len(occupied_green_beds) < green_beds:
                    occupied_green_beds.append(patient)
                    waiting.remove(patient)
                    continue
                else:
                    continue



        print(f"Hospitalized: Red Beds: {hospitalized[0]}, Orange Beds: {hospitalized[1]}, Yellow Beds: {hospitalized[2]}, Green Beds: {hospitalized[3]}")
        print(f"Capacity: Red Beds: {len(occupied_red_beds)} / {red_beds},")
        print(f"Capacity: Orange Beds: {len(occupied_orange_beds)} / {orange_beds},")
        print(f"Capacity: Yellow Beds: {len(occupied_yellow_beds)} / {yellow_beds}, ")
        print(f"Capacity: Green Beds: {len(occupied_green_beds)}  / {green_beds}")
        print(f"Waiting: {waiting}")
        print(f"Recoveries: {recoveries}, Deaths: {deaths}")


simulation(endtime, red_beds, orange_beds, yellow_beds, green_beds, patient_prob)
